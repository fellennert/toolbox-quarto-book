# Crawling the web

```{r echo=FALSE, message=FALSE, warning=FALSE}
vembedr::embed_youtube("Yg0wUkHjigs")
```

Today's session will be dedicated to getting data from the web. This process is also called scraping since we scrape data off from the surface and remodel it for our inferences. The following picture shows you the [web scraping cheat sheet](https://github.com/yusuzech/r-web-scraping-cheat-sheet/) that outlines the process of scraping the web. On the left side, you can see the first step in scraping the web which is requesting the information from the server. This is basically what is going under the hood when you make requests using a browser. The response is the website, usually stored in an XML document, which is then the starting point for your subsequent queries and data extraction.

![Web scraping cheat sheet](https://raw.githubusercontent.com/yusuzech/r-web-scraping-cheat-sheet/master/resources/functions_and_classes.png)

In today's session, you will learn different techniques to get your hands on data. In particular, this will encompass making simple URL requests with `read_html()`, using `session()`s to navigate around on a web page, submitting `html_form()`s to fill in forms on a web page, and making structured requests to APIs.

## Getting started with `rvest`

```{r echo=FALSE, message=FALSE, warning=FALSE}
vembedr::embed_youtube("NZsULhv0lmE")
```

### Making requests

The most basic form of making a request is by using `read_html()` from the `xml2` package.

```{r message=FALSE, warning=FALSE}
needs(httr, rvest, tidyverse)

page <- read_html("https://en.wikipedia.org/wiki/Tidyverse")

page |> str()

page |> as.character() |> write_lines("wiki.html")

#page |> html_text()
```

This is perfectly fine for making requests to static pages where you do not need to take any further action. Sometimes, however, this is not enough, and you want to accept cookies or move on the page.

### `session()`s

However, the slickest way to do this is by using a `session()`. In a session, R behaves like a normal browser, stores cookies, allows you to navigate between pages, by going `session_forward()` or `session_back()`, `session_follow_link()`s on the page itself or `session_jump_to()` a different URL, or submit `form()`s with `session_submit()`.

First, you start the session by simply calling `session()`.

```{r}
my_session <- session("https://scrapethissite.com/")
```

Some servers may not want robots to make requests and block you for this reason. To circumnavigate this, we can set a "user agent" in a session. The user agent contains data that the server receives from us when we make the request. Hence, by adapting it we can trick the server into thinking that we are humans instead of robots. Let's check the current user agent first:

```{r}
my_session$response$request$options$useragent
```

Not very human. We can set it to a common one using the `httr` package (which powers `rvest`).

```{r}
user_a <- user_agent("Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36")
session_with_ua <- session("https://scrapethissite.com/", user_a)
session_with_ua$response$request$options$useragent
```

You can check the response using `session$response$status_code` -- 200 is good.

```{r}
my_session$response$status_code
```

When you want to save a page from the session, do so using `read_html()`.

```{r}
page <- read_html(session_with_ua)
```

If you want to open a new URL, use `session_jump_to()`.

```{r}
session_with_ua <- session_with_ua |> 
  session_jump_to("https://www.scrapethissite.com/pages/")
session_with_ua
```

You can also click buttons on the page using CSS selectors or XPATHs (more on them next session!):

```{r}
session_with_ua <- session_with_ua |> 
  session_jump_to("https://www.scrapethissite.com/") |> 
  session_follow_link(css = ".btn-primary")

session_with_ua
```

Wanna go back -- `session_back()`; thereafter you can go `session_forward()`, too.

```{r}
session_with_ua <- session_with_ua |> 
  session_back()

session_with_ua

session_with_ua <- session_with_ua |> 
  session_forward()

session_with_ua
```

You can look at what your scraper has done with `session_history()`.

```{r}
session_with_ua |> session_history()
```

#### Exercise

1.  Start a session with the tidyverse Wikipedia page. Adapt your user agent to some sort of different value. Proceed to Hadley Wickham's page. Go back. Go forth. Jump to Pierre Bourdieu's Wikipedia page. Check the `session_history()` to see if it has worked.

```{r eval=FALSE}
needs(tidyverse, rvest)
tidyverse_wiki <- "https://en.wikipedia.org/wiki/Tidyverse"
pierre_wiki <- "https://en.wikipedia.org/wiki/Pierre_Bourdieu"
user_agent <- user_agent("Hi, I'm Felix and I'm trying to steal your data.") #can be changed
```

```{r eval=FALSE}
wiki_session <- session(tidyverse_wiki, user_agent)

wiki_session_jumped <- wiki_session |>  
  session_jump_to(hadley_wiki) |> 
  session_back() |> 
  session_forward() |> 
  session_jump_to(pierre_wiki)

wiki_session_jumped |> session_history()
```

### Forms

```{r echo=FALSE, message=FALSE, warning=FALSE}
vembedr::embed_youtube("KA4RGlL1jjE")
```

Sometimes we also want to provide certain input, e.g., to provide login credentials or to scrape a website more systematically. That information is usually provided using so-called [forms](https://www.w3schools.com/html/html_forms.asp). A `<form>` element can contain different other elements such as text fields or check boxes. Basically, we use `html_form()` to extract the form, `html_form_set()` to define what we want to submit, and `html_form_submit()` to finally submit it. [For a basic example, we search for something on Google.](https://rvest.tidyverse.org/reference/html_form.html)

```{r message=FALSE, warning=FALSE}
google <- read_html("http://www.google.com")
search <- html_form(google) |> pluck(1)

search |> str()

search_something <- search |> html_form_set(q = "something")
resp <- html_form_submit(search_something, submit = "btnG")
read_html(resp)

vals <- list(q = "web scraping", hl = "fr")

search_1 <- search |> html_form_set(!!!vals)
search_2 <- search |> html_form_set(q = "web scraping", hl = "fr")

resp <- html_form_submit(search_1)
read_html(resp)
```

If you are working with a session, the workflow is as follows:

1.  Extract the form.
2.  Set it.
3.  Start your session on the page with the form.
4.  Submit the form using `session_submit()`.

```{r}
google_form <- read_html("http://www.google.com") |> 
  html_form() |> 
  pluck(1) #another way to do [[1]]

search_something <- google_form |> html_form_set(q = "something")

google_session <- session("http://www.google.com") |> 
  session_submit(search_something, submit = "btnG")

google_session |> 
  read_html()
```

#### Exercise

2.  Start a session on "https://secure.lemonde.fr/sfuser/connexion", fill out, and submit the form. You will have to fill in a valid user name and password. (if you don't want to make an account: email = "felix.lennert\@ensae.fr", password = "notmyrealpassword")

```{r eval=FALSE}
url <- "https://secure.lemonde.fr/sfuser/connexion"

login_form <- read_html(url) |> 
  html_form() |> 
  pluck(1) #extract 

set_form <- login_form |> 
  html_form_set(email = "felix.lennert@ensae.fr", password = "notmyrealpassword") #set login form 

base_session <- session("https://secure.lemonde.fr/sfuser/connexion") |> 
  session_submit(set_form) |> 
  session_jump_to("https://www.lemonde.fr/archives-du-monde/")
```

### Scraping hacks

Some web pages are a bit fancier than the ones we have looked at so far (i.e., they use JavaScript). `rvest` works nicely for static web pages, but for more advanced ones you need different tools such as [`RSelenium`](https://docs.ropensci.org/RSelenium/). This, however, goes beyond the scope of this tutorial.

A web page may sometimes give you time-outs (i.e., it doesn't respond within a given time). This can break your loop. Wrapping your code in `safely()` or `insistently()` from the `purrr` package might help. The former moves on and notes down what has gone wrong, the latter keeps sending requests until it has been successful. They both work easiest if you put your scraping code in functions and wrap those with either [`insistently()`](https://purrr.tidyverse.org/reference/insistently.html) or [`safely()`](https://purrr.tidyverse.org/reference/safely.html).

Sometimes a web page keeps blocking you. Consider using a proxy server.

```{r eval=FALSE}
my_proxy <- httr::use_proxy(url = "http://example.com",
                            user_name = "myusername",
                            password = "mypassword",
                            auth = "one of basic, digest, digest_ie, gssnegotiate, ntlm, any")

my_session <- session("https://scrapethissite.com/", my_proxy)
```

Find more useful information -- including the stuff we just described -- and links on [this GitHub page](https://github.com/yusuzech/r-web-scraping-cheat-sheet/blob/master/README.md).

## Application Programming Interfaces (APIs)

```{r echo=FALSE, message=FALSE, warning=FALSE}
vembedr::embed_youtube("j64y6K2TAu4")
```

While web scraping (or *screen scraping*, as you extract the stuff that appears on your screen) is certainly fun, it should be seen as a last resort. More and more web platforms provide so-called Application Programming Interfaces (APIs).

> "An application programming interface (API) is a connection between computers or between computer programs." ([Wikipedia](https://en.wikipedia.org/wiki/API))

There are a bunch of different sorts of APIs, but the most common one is the REST API. REST stands for "REpresentational State Transfer" and describes a set of rules the API designers are supposed to obey when developing their particular interface. You can make different requests, such as *GET* content, *POST* a file to a server -- `PUT` is similar, or request to `DELETE` a file. We will only focus on the `GET` part.

APIs offer you a structured way to communicate with the platform via your machine. In our use case, this means that you can get the data you want in a usually well-structured format and without all the "dirt" that you need to scrape off tediously (enough web scraping metaphors for today). With APIs, you can generally quite clearly define what you want and how you want it. In R, we achieve this by using the `httr` [@wickham_httr_2020] package. Moreover, using APIs does not bear the risk of acquiring the information you are not supposed to access and you also do not need to worry about the server not being able to handle the load of your requests (usually, there are rate limits in place to address this particular issue). However, it's not all fun and games with APIs: they might give you their data in a special format, both XML and JSON are common. The former is the one `rvest` uses as well, the latter can be tamed using `jsonlite` [@ooms_jsonlite_2020] which is to be introduced as well. Moreover, you usually have to ask the platform for permission and perhaps pay to get it. Once you have received the keys you need, you can tell R to fill them automatically, similar to how your browser knows your Amazon password, etc.; `usethis` [@wickham_usethis_2021] can help you with such tasks.

The best thing that can happen with APIs: some of them are so popular that people have already written specific R packages for working with them -- an overview can be found on the [ROpenSci website](https://ropensci.org/packages/data-access/). One example of this was Twitter and the `rtweet` package [@kearney_rtweet_2019].

### Obtaining their data

API requests are performed using URLs. Those start with the *basic address of the API* (e.g., https://api.nytimes.com), followed by the *endpoint* that you want to use (e.g., /lists). They also contain so-called *headers* which are provided as key-value pairs. Those headers can contain for instance authentication tokens or different search parameters. A request to the New York Times API to obtain articles for January 2019 would then look like this: https://api.nytimes.com/svc/archive/v1/2019/1.json?api-key=yourkey.

At most APIs, you will have to register first. As we will play with the New York Times API, do this [here](https://developer.nytimes.com/get-started).

### Making queries

A basic query is performed using the `GET()` function. However, first, you need to define the call you want to make. The different keys and values they can take can be found in the [API documentation](https://developer.nytimes.com/docs/timeswire-product/1/overview). Of course, there is also a neater way to deal with the key problem. We will show it later.

```{r}
needs(httr, jsonlite)
#see overview here: https://developer.nytimes.com/docs/timeswire-product/1/overview
key <- Sys.getenv("nyt_key")

nyt_headlines <- modify_url(
  url = "https://api.nytimes.com/",
  path = "svc/news/v3/content/nyt/business.json",
  query = list(`api-key` = key)
  )

response <- GET(nyt_headlines)

response
```

When it comes to the [NYT news API](https://developer.nytimes.com/docs/timeswire-product/1/overview), there is the problem that the type of section is specified not in the query but in the endpoint path itself. Hence, if we were to scrape the different sections, we would have to change the path itself, e.g., through `str_c()` or `httr::modify_url()`.

```{r}
paths <- str_c("svc/news/v3/content/nyt/", c("business", "world"), ".json")

map(paths, 
    \(x) GET(modify_url(
      url = "https://api.nytimes.com/",
      path = x,
      query = list(`api-key` = key))
      )
    )

#map(1:3, \(x) x + 1)
```

The `Status:` code you want to see here is `200` which stands for success. If you want to put it inside a function, you might want to break the function once you get a non-successful query. `http_error()` or `http_status()` are your friends here.

```{r}
response |> http_error() # can be used in if...else
response |> http_status()
```

`content()` will give you the content of the request.

```{r eval=FALSE}
response |> content() |> glimpse()
```

What you see is also the content of the call -- which is what we want. It is in a format that we cannot work with right away, though, it is in JSON.

### JSON

The following unordered list is stolen from this [blog entry](https://www.earthdatascience.org/courses/earth-analytics/get-data-using-apis/intro-to-JSON/):

-   The data are in name/value pairs
-   Commas separate data objects
-   Curly brackets {} hold objects
-   Square brackets \[\] hold arrays
-   Each data element is enclosed with quotes "" if it is a character, or without quotes if it is a numeric value

```{r eval=FALSE}
writeLines(rawToChar(response$content))
```

`jsonlite` helps us to bring this output into a data frame.

```{r message=FALSE, warning=FALSE}
tbl_nyt <- response |> 
  content(as = "text") |>
  jsonlite::fromJSON() 

tbl_nyt |> str(max.level = 1)
tbl_nyt |> pluck(4) |> glimpse()
```

### Dealing with authentification

Well, as we saw before, we would have to put our official NYT API key publicly visible in this script. This is bad practice and should be avoided, especially if you work on a joint project (where everybody uses their code) or if you put your scripts in public places (such as GitHub). The `usethis` package can help you here.

```{r eval=FALSE}
needs(usethis)
usethis::edit_r_environ() # save key there
Sys.getenv("nyt_key")
```

#### Exercise

3.  Search for articles on the NYT API (find the proper parameters [here](https://developer.nytimes.com/docs/articlesearch-product/1/routes/articlesearch.json/get)) that deal with a certain topic (parameter "q"), set a certain begin and end date. Extract the results into a tibble.

Bonus: Provide the key by using the `Sys.getenv` function. So, if somebody wants to work with your code and their own key, all they need to make sure is that they have the API key stored in the environment with the same name.

```{r}
needs(tidyverse, jsonlite, httr)
trump_nov_2016 <- modify_url(
  url = "http://api.nytimes.com/",
  path = "svc/search/v2/articlesearch.json",
  query = list(q = "Trump",
               begin_date = "20161101",
               end_date = "20161110",
               `api-key` = Sys.getenv("nyt_key"))
) |> 
  GET()

trump_nov_2016_tbl <- trump_nov_2016 |> 
  content(as = "text") |>
  fromJSON() |> 
  pluck(3, 1)

trump_nov_2016_tbl[[3]][[1]]
```